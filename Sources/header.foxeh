# Fragment Name   : Header
# Fragment Info   : Holds all default values, useful functions, and initializations routines.
# Fragment Ver.   : 1.0.1 (07 Oct. 2021)
# Fragment Author : Alvin Schnee (FoxehCorp.)


# Colors

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
DEFAULT='\033[0m'

logHeader="${RED}STRELIZIA${DEFAULT} >"

# Setup dynamic spacer

space=''
for i in `seq 1 ${#$0}`; do 
    space+=' ' 
done

# Declaration of helper functions

function printSuccessOrFailure {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Done${DEFAULT}."
    else
        echo -e "${RED}Failed${DEFAULT}. Exiting." 
        exit 1
    fi
}

function printHelp {
    echo -e "$0"
    echo -e "Syntax :"
    echo -e "\t$0 <argument>"
    echo -e "Arguments :"
    echo -e "\t-d (alternatively --debug) : Displays information useful for debugging, and enables breakpoints after each command."
    echo -e "\t-h (alternatively --help : Displays help concerning the command."
}

function checkBootmode {
    if [ ! -d "/sys/firmware/efi/efivars" ]; then
        echo "BIOS"
    else
        echo "UEFI"
    fi
}

function formatPartitions {
    if [[ $(checkBootmode) = "BIOS" ]]; then
        echo y | mkfs.ext4 $disk"1" > /dev/null
        echo y | mkfs.ext4 $disk"3" > /dev/null
        echo y | mkfs.ext4 $disk"4" > /dev/null
    else
        parted $disk mklabel gpt
        cfdisk $disk
        mkfs.ext4 $disk"1"
        mkfs.ext4 $disk"4"
        if [ "$dualbooting" = false ]; then
            mkfs.fat -F32 $disk"2"
        fi
    fi
}

function initializeSwap {
    if [[ $(checkBootmode) = "BIOS" ]]; then
        mkswap $disk"2"
        swapon $disk"2"
    else
        mkswap $disk"3"
        swapon $disk"3"
    fi
}

function mountPartitions {
    if [[ $(checkBootmode) = "BIOS" ]]; then
        mount $disk"3" /mnt
        mkdir /mnt/{boot,home}
        mount $disk"1" /mnt/boot
        mount $disk"4" /mnt/home
    else
        mount $disk"1" /mnt
        mkdir /mnt/{boot,home}
        mkdir /mnt/boot/efi
        if [ "$dualbooting" = true ]; then
            mount UEFIPartition /mnt/boot/efi
        else
            mount $disk"2" /mnt/boot/efi
        fi
        mount $disk"4" /mnt/home
    fi
}


function handleArguments {
    while test $# -gt 0
    do
        case "$1" in
            -d | --debug)
                debug=true
            ;;
            -h | --help)
                printHelp
                exit 0
            ;;
            --disk)

                ### Read the disk name passed after --disk, and check its existence.

                shift
                disk=${1:5:8}
                #command=$(lsblk -io KNAME | sed -n "/${partition}$/p")

                if [[ $disk = $(lsblk -io KNAME | sed -n "/${disk}$/p") ]]; then
                    disk="$1"
                    sed -i "s@REPLACE_WITH_DISK_VALUE@${disk}@g" /bin/FTK_Initializer
                    echo -e "$logHeader Installation disk ${GREEN}successfully${DEFAULT} set to $disk."
                
                else 
                    echo -e "$logHeader $1 does ${RED}not${DEFAULT} exist. Exiting."
                    exit 1
                fi
            ;;
            -* | --* | *)
                echo -e "$logHeader Argument $1 not defined. Exiting."
                exit 1
            ;;
        esac
        shift
    done
}

clear

# End of Fragment